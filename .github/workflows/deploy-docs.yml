name: Deploy Versioned Documentation

on:
  push:
    branches: [main]
    tags: ["v*"] # Trigger on pushes to main AND on pushes of tags like v0.1, v1.0.0
  pull_request:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy-docs:
    name: Build and Deploy Docs to GitHub Pages
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache Python dependencies and venv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-venv-

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Create and Activate Virtual Environment & Install Dependencies
        run: |
          uv venv .venv
          uv pip install --python .venv/bin/python -r requirements.txt
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Configure Git User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Deploy with Mike
        id: publish
        run: |
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            VERSION_TAG="${GITHUB_REF#refs/tags/v}"
            echo "Deploying tagged version: $VERSION_TAG as 'latest'"
            mike deploy "$VERSION_TAG" latest --push --update-aliases
            mike set-default --push latest
          elif [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            echo "Deploying main branch to 'main' version with 'dev' alias"
            mike deploy main dev --push --update-aliases
          else
            echo "Skipping deployment for ref: $GITHUB_REF"
          fi

  build-docs-on-pr:
    name: Build Docs & Run Quality Checks (PR)
    if: github.event_name == 'pull_request' && github.base_ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache Python dependencies and venv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-venv-pr-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-venv-pr-
            ${{ runner.os }}-uv-venv-

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Create and Activate Virtual Environment & Install Dependencies
        run: |
          uv venv .venv
          source .venv/bin/activate
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
          uv pip install -r requirements.txt

      - name: Validate mkdocs.yml configuration
        run: |
          python -c "import yaml, sys
          print('Validating mkdocs.yml...')
          try:
              with open('mkdocs.yml', 'r') as f:
                  config = yaml.safe_load(f)
              assert config.get('extra', {}).get('version', {}).get('provider') == 'mike', \
                  'mkdocs.yml: extra.version.provider must be \"mike\"'
              assert config.get('site_dir') == 'public', \
                  'mkdocs.yml: site_dir must be \"public\" for link checker path'
              print('mkdocs.yml configuration checks passed.')
          except Exception as e:
              print(f'Error validating mkdocs.yml: {e}', file=sys.stderr)
              sys.exit(1)"

      - name: Build site with MkDocs (Strict Mode)
        run: |
          echo "Building site with MkDocs in strict mode..."
          mkdocs build --strict
          echo "MkDocs build successful."

      - name: Restore Lychee Cache
        uses: actions/cache@v4
        id: lychee-cache
        with:
          path: .lycheecache
          key: lychee-cache-${{ github.ref }}
          restore-keys: |
            lychee-cache-

      - name: Check for broken external links with Lychee Action
        uses: lycheeverse/lychee-action@v2
        id: lychee
        with:
          args: --cache --no-progress --verbose "./public/**/*.html"
          token: ${{ secrets.GITHUB_TOKEN }} # Using the standard GITHUB_TOKEN
